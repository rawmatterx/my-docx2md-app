{
  "meta": {
    "project": "DocX to Markdown Bulk Converter",
    "version": "1.0.0",
    "date": "2024-06-01",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "DocX to Markdown Bulk Converter is a modern Electron-based desktop application designed to facilitate bulk conversion of Microsoft Word (.docx) documents to Markdown format with a user-friendly React frontend.",
  "core_goals": [
    "Provide a fast, reliable, and easy-to-use tool for batch converting .docx files to Markdown.",
    "Offer an intuitive drag-and-drop interface and native file/folder selection dialogs.",
    "Support recursive folder scanning to handle large document collections.",
    "Track and display real-time progress for batch processing tasks.",
    "Enable file management with status indicators and error reports.",
    "Allow output directory selection and theme switching (light, dark, system).",
    "Deliver a responsive UI with animations and graceful error handling."
  ],
  "key_features": [
    "Electron desktop application with React and Tailwind CSS frontend.",
    "Drag-and-drop interface and native file/folder selection dialogs.",
    "Batch processing of multiple .docx files with recursive folder scanning.",
    "Conversion pipeline using mammoth.js (DOCX to HTML) and html2text (HTML to Markdown).",
    "Real-time progress tracking and status updates via IPC communication.",
    "File management panel showing file status and error messages.",
    "Output directory selection and batch statistics display.",
    "Theme switching (light/dark/system) with responsive design and animations.",
    "PWA support for a web fallback with placeholder conversion.",
    "Basic logging UI and configuration panels (partially implemented)."
  ],
  "user_flow_summary": [
    "User selects files or folders via native dialog or drag-drop.",
    "Main process scans selected items recursively for .docx files.",
    "Files are queued as ConversionTask objects for processing.",
    "Each file is read and converted from DOCX to HTML, then to Markdown.",
    "Conversion progress and results are communicated back to the UI in real-time.",
    "Completed Markdown files are saved to the designated output directory.",
    "User monitors progress and file statuses in the file management panel.",
    "User can switch themes and configure settings via configuration panel."
  ],
  "validation_criteria": [
    "Successful conversion of .docx files to Markdown format matching expected content structure.",
    "Accurate progress reporting for batch processing tasks without delays.",
    "Reliable recursive scanning of folders for DOCX files.",
    "Error handling that provides clear messaging and does not crash the application.",
    "UI responsiveness and correct theme switching behavior.",
    "Proper saving of converted Markdown files to user-selected locations.",
    "Stable IPC communication between Electron main and renderer processes."
  ],
  "api_doc": {
    "MarkItDown Python API": {
      "Description": "Lightweight Python utility for converting multiple file formats to Markdown, focusing on document structure preservation for LLMs and text analysis.",
      "Supported File Formats": [
        "PDF",
        "PowerPoint",
        "Word",
        "Excel",
        "Images",
        "Audio",
        "HTML",
        "Text-based formats",
        "ZIP files",
        "YouTube URLs",
        "EPUBs"
      ],
      "Installation": "pip install 'markitdown[all]'",
      "Usage Examples": {
        "Command_Line": "markitdown path-to-file.pdf > document.md",
        "Python_API": "from markitdown import MarkItDown\nmd = MarkItDown(enable_plugins=False)\nresult = md.convert('test.xlsx')\nprint(result.text_content)",
        "Azure_Document_Intelligence": "markitdown path-to-file.pdf -o document.md -d -e '<document_intelligence_endpoint>'",
        "LLM_Image_Description": "from markitdown import MarkItDown\nfrom openai import OpenAI\nclient = OpenAI()\nmd = MarkItDown(llm_client=client, llm_model='gpt-4o')\nresult = md.convert('example.jpg')\nprint(result.text_content)"
      },
      "Features": [
        "Supports many optional file format plugins.",
        "Streams input from file-like binary streams without temp files.",
        "Supports integration with Microsoft Document Intelligence and LLMs.",
        "Docker support for containerized usage.",
        "Plugin system for extensibility."
      ],
      "Endpoints": null,
      "Commands": {
        "markitdown CLI": "Convert supported files to Markdown via command line with optional output file argument and streaming input support."
      },
      "Notes": "MarkItDown focuses on Markdown output suited for machine processing rather than high-fidelity human-readable documents."
    }
  },
  "code_summary": {
    "project_name": "DocX to Markdown Bulk Converter",
    "project_description": "A modern Electron-based desktop application with React frontend for bulk conversion of Microsoft Word (.docx) documents to Markdown format. Features drag-and-drop interface, batch processing, progress tracking, and file management capabilities.",
    "tech_stack": {
      "frontend": [
        "React 18",
        "TypeScript",
        "Tailwind CSS v4",
        "Framer Motion",
        "Lucide React Icons",
        "Vite"
      ],
      "backend": [
        "Electron",
        "Node.js",
        "TypeScript"
      ],
      "conversion_libraries": [
        "mammoth.js - DOCX to HTML conversion",
        "html2text - HTML to Markdown conversion"
      ],
      "build_tools": [
        "Vite",
        "PostCSS",
        "Autoprefixer",
        "ESLint"
      ]
    },
    "architecture": {
      "type": "Electron Desktop Application",
      "main_process": "src/main/main.ts - Handles file system operations, IPC communication, and conversion logic",
      "renderer_process": "src/renderer/ - React-based UI with modern design",
      "preload_script": "src/preload/preload.ts - Secure bridge between main and renderer processes",
      "communication": "IPC (Inter-Process Communication) via Electron's contextBridge"
    },
    "current_features": {
      "implemented": [
        "Modern React UI with Tailwind CSS v4",
        "File selection (individual files and folders)",
        "Drag and drop interface",
        "Batch file processing",
        "Real-time conversion progress tracking",
        "File management panel with status indicators",
        "Output directory selection",
        "Theme switching (light/dark/system)",
        "Responsive design with animations",
        "Error handling and status reporting",
        "DOCX to Markdown conversion using mammoth.js + html2text",
        "Recursive folder scanning for DOCX files",
        "File size formatting and statistics",
        "PWA support with service worker"
      ],
      "partially_implemented": [
        "Web version fallback (WebFileHandler.ts exists but uses placeholder conversion)",
        "Configuration panel with settings tabs",
        "Logging system (UI exists but backend logging not fully implemented)"
      ]
    },
    "conversion_workflow": {
      "electron_version": [
        "1. User selects files/folders via native dialog or drag-drop",
        "2. Main process scans for .docx files recursively",
        "3. Files are queued as ConversionTask objects",
        "4. For each file: Read DOCX → mammoth.js converts to HTML → html2text converts to Markdown",
        "5. Progress updates sent to renderer via IPC",
        "6. Converted files saved to selected output directory",
        "7. Status updates and error handling throughout process"
      ],
      "web_version": [
        "1. File selection via HTML input elements",
        "2. Placeholder conversion (not fully functional)",
        "3. Download via blob URLs and anchor elements"
      ]
    },
    "file_structure": {
      "main_process": {
        "src/main/main.ts": "Core Electron app, IPC handlers, conversion logic"
      },
      "preload": {
        "src/preload/preload.ts": "Secure API bridge with type definitions"
      },
      "renderer": {
        "src/renderer/src/App.tsx": "Main React application component",
        "src/renderer/src/components/": "UI components (FileManagementPanel, ProcessingPanel, ConfigurationPanel, TitleBar)",
        "src/renderer/src/contexts/ThemeContext.tsx": "Theme management",
        "src/renderer/src/utils/webFileHandler.ts": "Web version file handling (fallback)",
        "src/renderer/src/index.css": "Tailwind CSS styles with custom components"
      }
    },
    "data_models": {
      "ConversionTask": {
        "id": "string - unique identifier",
        "inputPath": "string - source file path",
        "outputPath": "string - destination file path",
        "fileName": "string - display name",
        "fileSize": "number - file size in bytes",
        "status": "'pending' | 'processing' | 'completed' | 'failed'",
        "errorMessage": "string? - error details if failed",
        "file": "File? - browser File object for web version"
      }
    },
    "current_issues": {
      "critical": [
        "Web version conversion is placeholder-only (not functional)",
        "No actual Microsoft MarkItDown integration despite project name",
        "Build warnings about CJS/ESM module types",
        "404 errors when trying to run as web app"
      ],
      "moderate": [
        "Limited error handling for malformed DOCX files",
        "No batch size limits or memory management",
        "No conversion quality settings or options",
        "Missing comprehensive logging system",
        "No file validation beyond extension checking"
      ],
      "minor": [
        "Some UI components have unused props",
        "Theme switching could be more performant",
        "Missing accessibility features"
      ]
    },
    "missing_features": {
      "core_functionality": [
        "Integration with Microsoft MarkItDown library for enhanced conversion",
        "Support for additional file formats (PDF, PPTX, XLSX)",
        "Advanced conversion options and settings",
        "Conversion quality assessment and validation",
        "Batch processing with memory management",
        "Resume/pause conversion capabilities"
      ],
      "web_deployment": [
        "Functional web version with client-side conversion",
        "Server-side conversion API",
        "Cloud storage integration",
        "User authentication and file management",
        "Progressive Web App features"
      ],
      "enterprise_features": [
        "Bulk processing with job queues",
        "API endpoints for programmatic access",
        "Configuration management",
        "Audit logging and reporting",
        "Integration with document management systems"
      ]
    },
    "dependencies": {
      "production": {
        "electron": "^latest",
        "mammoth": "^1.x.x",
        "html2text": "^latest",
        "react": "^18.x.x",
        "framer-motion": "^latest",
        "lucide-react": "^latest"
      },
      "development": {
        "vite": "^5.x.x",
        "typescript": "^5.x.x",
        "tailwindcss": "^4.1.11",
        "@tailwindcss/postcss": "^4.1.11",
        "eslint": "^latest"
      }
    },
    "deployment_status": {
      "electron_app": "Functional with working conversion",
      "web_app": "Non-functional - placeholder implementation only",
      "build_system": "Working with Tailwind v4 compatibility achieved"
    }
  }
}
